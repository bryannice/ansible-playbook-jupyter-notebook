name: Build Debian Container and Push to Docker Hub

on:
  push:
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  buildDockerImage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set Tag Name
        id: get_tag_name
        run: echo ::set-output name=tag_name::$(echo ${GITHUB_REF##*/})
      - name: Capture environment variables
        run: printenv
      - name: Get Packer Build Configuration
        env:
          PACKER_DOCKER_ANSIBLE_VERSION: 1.0.0
        run: |
          git clone https://github.com/bryannice/packer-docker-ansible
          cd packer-docker-ansible
          git checkout ${PACKER_DOCKER_ANSIBLE_VERSION}
      - name: Build Docker Image
        env:
          CONTAINER_IMAGE_BUILDER: true
          PKR_VAR_ansible_playbook_path: ${{ github.workspace }}
          PKR_VAR_base_container_image: "python:3.9.1-buster"
          PKR_VAR_container_entrypoint: "'ENTRYPOINT /entrypoint/init.py'"
          PKR_VAR_container_image_repository: bryannice/jupyter-notebook
          PKR_VAR_container_image_tag: debian-10.7-${{ steps.get_tag_name.outputs.tag_name }}
          PKR_VAR_container_registry_password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          PKR_VAR_container_registry_server: https://index.docker.io/v1/
          PKR_VAR_container_registry_username: ${{ secrets.DOCKER_HUB_USERNAME }}
          PKR_VAR_container_working_directory: "'WORKDIR /entrypoint'"
        id: build_docker_image
        run: packer build -only=docker.ansible packer-docker-ansible/
      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2.4.1
        if: success()
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: bryannice/jupyter-notebook
          readme-filepath: README.md
  logDockerBuild:
    needs: buildDockerImage
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables With Build Info
        id: job_info
        run: |
          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o job_info.json https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/jobs
          echo ::set-output name=log_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .url')
          echo ::set-output name=html_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .html_url')
          echo ::set-output name=status::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .conclusion')
          echo ::set-output name=branch_name::$(echo ${GITHUB_REF##*/})
          echo ::set-output name=repo_name::$(echo ${GITHUB_REPOSITORY##*/})
      - name: Generate log file
        run: curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o build_logs.txt ${{ steps.job_info.outputs.log_url }}/logs
      - name: Slack Notification
        id: slack_notification
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: contains(steps.job_info.outputs.status, 'failure')
        env:
          GITHUB_ACTION: ${{ github.action }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          SLACK_CHANNEL: ${{ steps.job_info.outputs.repo_name }}
          SLACK_COLOR: '#3278BD'
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
          SLACK_MESSAGE: |
            OS: Debian
            Branch Name: ${{ steps.job_info.outputs.branch_name }}
            The commit SHA is: ${{ github.sha }}
            Git Actions Log URL: ${{ steps.job_info.outputs.html_url }}
          SLACK_TITLE: 'FAULRE: ${{ steps.job_info.outputs.repo_name }} docker image build failed on commit sha ${{ github.sha }}'
          SLACK_USERNAME: ${{ steps.job_info.outputs.repo_name }}
      - name: Persisting log
        id: persisting_log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: workflow_log
          path: build_logs.txt
